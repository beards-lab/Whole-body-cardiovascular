// Runs a volume loading scenario to find volume compensating given heart failure
// be careful about too large files, the simulation output processing is limited to 2GB

cd D:\data\
Advanced.SparseActivate = true;me increase5e-3}, autoLoad=false);
end for;
Advanced.NumberOfCores = 4;

experimentSetupOutput(events=false,equidistant=true);

totalTime = 0;

for i in 2200:100:2500 loop
  // LVfunctionFrime/3600) + "h";
  "Max vol " + String((stopTimeAdj - 60)*1/1000) + "L";
  String(stopTimeAdj) + "s";
  totalTime = totalTime + stopTimeAdj;

simulateExtendedModel("ADAN_main.SystemicTree.Variations.Renals.CVS_renalRegulation_HFpEF_baro", 
stopTime=stopTimeAdj, action = Real(i/100);
  // LVfunctionFraction = 10;  
  stopTimeAdj = min((10 + (i)*1), 120)*60;
  // Total maximal volume increase
  "Max vol " + String((stopTimeAdj - 60)*1/1000) + "L";
  String(stopTimeAdj) + "s";
  totalTime = totalTime + stopTimeAdj;

simulateExtendedModel("ADAN_main.SystemicTree.Variations.Renals.CVS_renalRegulation_HFpEF", 
stopTime=stopTimeAdj, 
numberOfIntervals=0, outputInterval=0.1, method="Cvode", tolerance=1e-07, resultFile="CVS_renalRegulation_HFpEF_" + String(i),
initialNames = {"stiffeningFactor", "initVol"},
initialValues = {i/100, 3e-3}, autoLoad=false);
end for;

"NoBaro time spent: " + String(totalTime/3600) + "h";

for i in 1000:100:2500 loop
  stopTimeAdj = min((10 + (i)*1), 120)*60;
  // Total maximal volu
"Total time spent: " + String(totalT
numberOfIntervals=0, outputInterval=0.1, method="Cvode", tolerance=1e-07, resultFile="CVS_renalRegulation_HFpEF_baro_" + String(i),
initialNames = {"stiffeningFactor", "initVol"},
initialValues = {i/100, 0.